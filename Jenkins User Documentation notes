Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.

Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.

The Jenkins credentials functionality is provided by the Credentials Binding plugin.

Jenkins can store the following types of credentials:

   Secret text - a token such as an API token (e.g. a GitHub personal access token),

   Username and password - which could be handled as separate components or as a colon separated string in the format username:password (read more about this in Handling credentials),

   Secret file - which is essentially secret content in a file,

   SSH Username with private key - an SSH public/private key pair,

   Certificate - a PKCS#12 certificate file and optional password, or

   Docker Host Certificate Authentication credentials.
   
 Credentials can be added to Jenkins by any Jenkins user who has the Credentials > Create permission (set through Matrix-based security). 
 
 Otherwise, any Jenkins user can add and configure credentials if the Authorization settings of your Jenkins instance’s Configure Global Security settings page is set to the default Logged-in users can do anything setting or Anyone can do anything setting.

 Pipeline jobs can by stopped by sending an HTTP POST request to URL endpoints of a build.

    BUILD ID URL/stop - aborts a Pipeline.

    BUILD ID URL/term - forcibly terminates a build (should only be used if stop does not work).

    BUILD ID URL/kill - hard kill a pipeline. This is the most destructive way to stop a pipeline and should only be used as a last resort.
    
 Jenkins supports file fingerprinting to track dependencies.
 
 Go to your project, click Configure in the left navigation bar, then scroll down to the Post-build Actions section of the job

    Click on the button to add a Post-build action.

    Select Record fingerprints of files to track usage.
    
 Maven job type does this automatically for its dependencies and artifacts.
 
 Fingerprint location: $JENKINS_HOME/fingerprints
 
 Plugins can store additional information with regards to fingerprints. For example, Deployment Notification Plugin tracks files deployed on servers via chef/puppet through fingerprints.

Jenkins Pipeline is a suite of plugins that supports implementing and integrating continuous delivery pipelines into Jenkins.

pipeline plugin is a suggested plugin

A Pipeline can be created in one of the following ways:

  Through Blue Ocean - after setting up a Pipeline project in Blue Ocean, the Blue Ocean UI helps you write your Pipeline’s Jenkinsfile and commit it to source control.

  Through the classic UI - you can enter a basic Pipeline directly in Jenkins through the classic UI.

  In SCM - you can write a Jenkinsfile manually, which you can commit to your project’s source control repository.
  
Creating a Jenkinsfile and committing it to source control provides a number of immediate benefits:

  Automatically creates a Pipeline build process for all branches and pull requests.

  Code review/iteration on the Pipeline (along with the remaining source code).

  Audit trail for the Pipeline.

  Single source of truth [3] for the Pipeline, which can be viewed and edited by multiple members of the project.  
   
  The Multibranch Pipeline project type enables you to implement different Jenkinsfiles for different branches of the same project.
  
  By default, Jenkins will not automatically re-index the repository for branch additions or deletions (unless using an Organization Folder)
  
  Organization Folders enable Jenkins to monitor an entire GitHub Organization, Bitbucket Team/Project, GitLab organization, or Gitea organization and automatically create new Multibranch Pipelines for repositories which contain branches and pull requests containing a Jenkinsfile.
 
 Pipeline is also extensible both by users with Pipeline Shared Libraries and by plugin developers.

Blue ocean features: 

Sophisticated visualizations of continuous delivery (CD) Pipelines, allowing for fast and intuitive comprehension of your Pipeline’s status.

Pipeline editor - makes creation of Pipelines approachable by guiding the user through an intuitive and visual process to create a Pipeline.

Personalization to suit the role-based needs of each member of the team.

Pinpoint precision when intervention is needed and/or issues arise. Blue Ocean shows where in the pipeline attention is needed, facilitating exception handling and increasing productivity.

Native integration for branch and pull requests, enables maximum developer productivity when collaborating on code with others in GitHub and Bitbucket.

 Under the hood, a Pipeline project created through Blue Ocean is actually "multibranch Pipeline". Therefore, Jenkins looks for the presence of at least
 one Jenkinsfile in any branch of your repository.
 
 This list shows the overall state of each Pipeline configured on the Jenkins instance (which can also include other Jenkins items). For a given item in this list, the following information is indicated:

The item’s NAME,

The item’s HEALTH,

The numbers of BRANCHes and pull requests (PRs) of the Pipeline’s source control repository which are passing or failing, and

A star indicating whether or not the default/main branch of the item has been manually added to your current Jenkins user’s Favorites list.

Health icons on the Dashboard represent overall Pipeline health, whereas the health icons in the Branches tab of the Activity View represent the overall health for each branch.

Table 1. Health icons (best to worst)
Icon	Health
Sunny

Sunny, more than 80% of Runs passing

Partially Sunny

Partially Sunny, 61% to 80% of Runs passing

Cloudy

Cloudy, 41% to 60% of Runs passing

Raining

Raining, 21% to 40% of Runs passing

Storm

Storm, less than 21% of Runs passing

Run status

Blue Ocean represents the run status of a Pipeline/item or one of its repository’s branches using a consistent set of icons throughout.

Table 2. Run status icons

Status:

In Progress

Passed

Unstable

Failed

aborted

The editor can be launched via:

Dashboard "New Pipeline" button

Activity View for Single Run

Pipeline Run Details

Managing Security: (Manage Jenkins -> Configure global security)
*********************

Jenkins can use a TCP port to communicate with inbound (formerly known as “JNLP”) agents, such as Windows-based agents.
As of Jenkins 2.0, by default this port is disabled.

Access Control is the primary mechanism for securing a Jenkins environment against unauthorized usage. Two facets of configuration are necessary for configuring Access Control in Jenkins:

A Security Realm which informs the Jenkins environment how and where to pull user (or identity) information from. Also commonly known as "authentication."

Delegate to servlet container
Jenkins’ own user database
LDAP
Unix user/group database

Authorization configuration which informs the Jenkins environment as to which users and/or groups can access which aspects of Jenkins, and to what extent.

Anyone can do anything
Legacy mode
Logged in users can do anything
Matrix-based security
Project-based Matrix Authorization Strategy

Role-based Authorization Strategy plugin can extend the Access Control capabilities of Jenkins to support even more nuanced authentication and authorization schemes.

Matrix-based security and Project-based Matrix Authorization Strategy are provided by the Matrix Authorization Strategy Plugin

Cross Site Request Forgery (CSRF):

A cross site request forgery (or CSRF/XSRF) [1] is an exploit that enables an unauthorized third party to perform requests against 
a web application by impersonating another, authenticated, user. 

Agent/Master Access Control:

An administrator may edit Commands and File Access Agent/Master access control rules.

Administrators may also whitelist classes by creating files with the .conf extension in the directory JENKINS_HOME/secrets/whitelisted-callables.d/. The contents of these .conf files should list command names on separate lines.

The contents of all the .conf files in the directory will be read by Jenkins and combined to create a default.conf file in the directory which lists all known safe command. The default.conf file
will be re-written each time Jenkins boots.

Groovy scripts: 

Plugins enabling Groovy usage
Config File Provider Plugin Adds the ability to provide configuration files (i.e., settings.xml for maven, XML, groovy, custom files, etc.) loaded through the Jenkins UI which will be copied to the job’s workspace.

Global Post Script Plugin — Execute a global configured groovy script after each build of each job managed by the Jenkins.
This is typical for cases when you need to do something based on a shared set of parameters, such as triggering downstream jobs managed by the same Jenkins or remote ones based on the parameters been passed to the parameterized jobs.

Groovy plugin: Plugins enabling groovy scripts are as below: 

Groovy Postbuild Plugin — This plugin executes a groovy script in the Jenkins JVM. Typically, the script checks some conditions and changes accordingly the build result, puts badges next to the build in the build history and/or displays information on the build summary page.

Groovy Remote Control Plugin — This plugin provides Groovy Remote Control's receiver, and allows to control external application from Jenkins.

Matrix Groovy Execution Strategy Plugin — A plugin to decide the execution order and valid combinations of matrix projects.

Pipeline Classpath Step Plugin Pipeline DSL step to add path to the groovy classpath

Scriptler Plugin — Scriptler allows you to store/edit groovy scripts and execute it on any of the nodes…​ no need to copy/paste groovy code anymore.

In-process Script Approval: 
**********************************
To protect Jenkins from execution of malicious scripts, these plugins execute user-provided scripts in a Groovy Sandbox that limits what internal APIs are accessible.
This protection is provided by the Script Security plugin.

Themes for user interface:
*******************
These are the 2 most popular plugins:

Simple Theme Plugin - allows customizing the Jenkins UI by providing custom CSS and Javascript files. It also supports replacing the Favicon. There are many themes created by Jenkins users.

Login Theme Plugin - allows modifying or replacing the Jenkins login screen. It is required to customize login screens starting from Jenkins 2.128 (announcement).

To configure a theme, you need to first install a theme management plugin and then configure it. Both plugins can be managed in the Jenkins Web UI or
by the Configuration-as-Code Plugin

System Administration:
***********************
Monitoring plugins are as below : 

Datadog plugin for Jenkins
Metrics-Datadog plugin for Jenkins
Jenkins on Datadog
Prometheus plugin for Jenkins
Versions Node Monitors
Agents Monitoring for unix nodes
Job/Queue/Slaves Monitoring

Ping Thread:
*************

Jenkins installs "ping thread" on every remoting connection, such as controller/agent connections, regardless of its transport mechanism (such as SSH, JNLP, etc.)

The ping thread measures the time it takes for the reply to arrive, and if it’s taking excessive time (currently 4 minutes and configurable), then it assumes that the 
connection was lost and initiates the formal close down.

Ping thread is installed on both controller & agent; each side pings the other and tries to detect the problem from their own sides.

To disable the controller from pinging agents, the system property hudson.slaves.ChannelPinger.pingInterval should be set on the controller JVM to -1. 

Securing Jenkins:
**************
Access control: 
Security Realm, which determines users and their passwords, as well as what groups the users belong to. ( LDAP/Active Directory/jenkins own database/Unix user group database) 
Authorization Strategy, which determines who has access to what. ( Logged-in users can do anything/ Matrix-based security/Project-based Matrix Authorization Strategy)







