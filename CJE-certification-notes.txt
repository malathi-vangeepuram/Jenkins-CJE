AWS lightsail
*************

Amazon Lightsail: Lightsail is designed to be the easiest way to launch and manage a virtual private server with AWS. Lightsail plans include everything
you need to jumpstart your project – a virtual machine, SSD-based storage, data transfer, DNS management, and a static IP – for a low, predictable price.

Reference : https://github.com/jenkins-training   - For jenkins instance set up 

Below script for setting up jenkins master:
********************************************

#!/bin/bash

# Update from OS install
apt-get update -y

# Common utilities
apt-get install -y nano zip unzip wget curl git

# Install Java 8
apt-get install -y openjdk-8-jdk openjdk-8-jdk-headless

# install Maven
MVN_VER=3.5.4

cd /usr/local
wget http://www-us.apache.org/dist/maven/maven-3/$MVN_VER/binaries/apache-maven-$MVN_VER-bin.tar.gz
tar -xvzf apache-maven-$MVN_VER-bin.tar.gz
ln -s apache-maven-$MVN_VER maven
chown -R root.root apache-maven-$MVN_VER
chmod 755 apache-maven-$MVN_VER
ln -s maven/bin/mvn bin/mvn

# install Jenkins
cd
wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
cd /etc/apt/sources.list.d
echo "deb https://pkg.jenkins.io/debian-stable binary/" >> jenkins.list
apt-get update -y
apt-get install -y jenkins

systemctl start jenkins
systemctl enable jenkins

apt-get install -y nginx

# remove default symlink
cd /etc/nginx/sites-enabled
rm default

cd /etc/nginx/conf.d
wget https://raw.githubusercontent.com/jenkins-training/jenkins-bootcamp-course/master/aws/lightsail/lightsail-jenkins.conf

systemctl restart nginx
systemctl enable nginx

**********************************************************************************************************************************

> Create a lightsail simple ubuntu instance using the above script 
Note: Under the hoods, AWS uses cloud-init system to run our launch script. Check for cloud-init-output file under /var/log for all commands specified during launch time. 

> Create static ip for the above instance using Networking option 
> Modify the /etc/hosts file with the staticIp and name
> Access the instance with either staticIP or name using the below command: 
  ssh ec2-user@IP -i ~/.ssh/aws-lightsail-jenkins-master.key
> Modify the config file in .ssh as below for easier access to the instance: 
  Host build.jenkins.training
       User ec2-user
       IdentityFile ~/.ssh/aws-lightsail-jenkins-master.key
> After the above step, you can access the instance in a simple way as below: 
  ssh ec2-user@IP       or  ssh ec2-user@build.jenkins.training
> Make sure Java. Mavne and Jenkins are properly installed in the instance by checking the log file cloud-init-output file under /var/log
> Now, access the Jenkins server from browser using the hostname (build.jenkins.training)


https://github.com/devlauer/jenkins-keycloak-plugin/issues/2

sudo systemctl stop jenkins
 sudo vi /var/lib/jenkins/config.xml

 <useSecurity>

 sudo systemctl status jenkins

 sudo systemctl start jenkins

sudo cat /var/lib/jenkins/secrets/initialAdminPassword


*****************************************************************************************************************************************************************
Setting up secure Jenkins server
************************************************************
Make sure to take a snapshot from previous one and then create new instance from that snapshot and use the new secure-jenkins.sh 

ssh-keygen -R malathi.vangeepuram.org
ssh malathi.vangeepuram.org
sudo su -l
cd /var/www
cd /etc/nginx/sites-available 
vi  jenkins-secured.conf [Replace server name]
Restart nginx
certbot certonly --webroot -w /var/www/jenkins/ -d <domain name> 
cd /etc/letsencrypt/live [Location of certificate]
systemctl stop nginx
nano jenkins.secured.conf 
Uncomment the SSL certs and also use the path given by certbot and use the correct server name 
nginx -t 
systemctl start nginx.service
*******************************************************************************************************

Pipelines:
*************
Jenkins pipelines allows you to write jenkins build steps in code.
Build steps allow you to write build, test, deploy in code 
Job DSL and pipelines both have the capability to write CI/CD in code 
Job DSL creates new jobs based on your code whereas jenkins pipeline is a job type that will handle the build/test/deployment of one project.
You can use job DSL's to create new pipeline jobs.
Organization folder feature of jenkins pipeline: Detects changes in project repos and removes the need to create new jobs.
You can choose to write pipelines in job DSL (declarative pipeline) or in groovy (Scripted pipeline).

Jenkins pipelines:
***************
Jenkins Pipeline (or simply "Pipeline" with a capital "P") is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins.
The definition of a Jenkins Pipeline is written into a text file (called a Jenkinsfile) which in turn can be committed to a project’s source control repository. 

Creating a Jenkinsfile and committing it to source control provides a number of immediate benefits:
Automatically creates a Pipeline build process for all branches and pull requests.
Code review/iteration on the Pipeline (along with the remaining source code).
Audit trail for the Pipeline.
Single source of truth [3] for the Pipeline, which can be viewed and edited by multiple members of the project.

A Jenkinsfile can be written using two types of syntax - Declarative and Scripted.

Features of pipelines:
Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit, review, and iterate upon their delivery pipeline.
Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins controller.
Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run.
Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel.
Extensible: The Pipeline plugin supports custom extensions to its DSL footnote:dsl:[] and multiple options for integration with other plugins.

A Pipeline is a user-defined model of a CD pipeline. A Pipeline’s code defines your entire build process, which typically includes stages for building an application, testing it and then delivering it.
A Pipeline’s code defines your entire build process, which typically includes stages for building an application, testing it and then delivering it.
A pipeline block is a key part of Declarative Pipeline syntax.
A node block is a key part of Scripted Pipeline syntax.
A stage block defines a conceptually distinct subset of tasks performed through the entire Pipeline 
Step: A single task

Jenkinsfile (Declarative Pipeline)
*********************
pipeline {
    agent any 
    stages {
        stage('Build') { 
            steps {
                // 
            }
        }
        stage('Test') { 
            steps {
                // 
            }
        }
        stage('Deploy') { 
            steps {
                // 
            }
        }
    }
}

Jenkinsfile (Scripted Pipeline)
node {  
    stage('Build') { 
        // 
    }
    stage('Test') { 
        // 
    }
    stage('Deploy') { 
        // 
    }
}


Examples:
********

Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any 
    stages {
        stage('Stage 1') {
            steps {
                echo 'Hello world!' 
            }
        }
    }
}


*********************************************
Jenkins pipeline with nodeJS and docker
*********************************************
https://github.com/wardviaene/docker-demo/

node {
   def commit_id
   stage('Preparation') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"                        
     commit_id = readFile('.git/commit-id').trim()
   }
   stage('test') {
     nodejs(nodeJSInstallationName: 'nodejs') {
       sh 'npm install --only=dev'
       sh 'npm test'
     }
   }
   stage('docker build/push') {
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
       def app = docker.build("mvangeepuram/nodejs:${commit_id}", '.').push()
 
   }
   }
}

Build, test and run everything in docker:
***********************************************
https://github.com/wardviaene/docker-demo/

node {
   def commit_id
   stage('Preparation') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"                        
     commit_id = readFile('.git/commit-id').trim()
   }
   stage('test') {
     nodejs(nodeJSInstallationName: 'nodejs') {
       sh 'npm install --only=dev'
       sh 'npm test'
     }
   }
   stage('docker build/push') {
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
       def app = docker.build("mvangeepuram/nodejs:${commit_id}", '.').push()
 
   }
   }
}




